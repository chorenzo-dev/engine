Generate a Chorenzo recipe for: {{ recipe_name }}

Summary: {{ summary }}
Category: {{ category }}
Recipe ID: {{ recipe_id }}
Recipe Path: {{ recipe_path }}
{{ additional_instructions }}

Follow these guidelines for creating the recipe:
{{ recipe_guidelines }}

**ECOSYSTEM REQUIREMENTS:**

- Use ONLY `javascript` or `python` as ecosystem IDs
- An ecosystem refers to the language runtime environment, NOT specific technologies
- ✅ `javascript` includes: TypeScript, Node.js, React, Vue, Angular, etc.
- ✅ `python` includes: Django, Flask, FastAPI, etc.

**VARIANT CREATION RULES:**

- CRITICAL: When you detect multiple tools/approaches in your fix instructions, you MUST create separate variants
- Each distinct tool or approach gets its own variant with its own fix file
- Good variants: Different tools that accomplish the same goal through different approaches
- Bad variants: Minor configuration differences within the same tool, different versions of the same tool, cosmetic naming differences
- If only one approach exists, use single 'default' variant
- If you find yourself writing "For Tool A do X, for Tool B do Y" in a single fix file, create separate variants instead

**PROVIDES/REQUIRES GUIDELINES:**

**CRITICAL: Provides variables should be SCARCE. Default to empty `provides: []` in most cases.**

- **DEFAULT BEHAVIOR**: Use empty `provides: []` - Most recipes should have no provides variables
- **ONLY add provides when absolutely certain** other recipes would depend on this state
- **When in doubt, don't add** - It's better to require manual addition than create clutter
- **Focus on infrastructure/tooling state** that other recipes genuinely need to know about

**When to add provides variables:**
- Only when the recipe sets up fundamental infrastructure that other recipes genuinely need
- Only when there's a clear, obvious case that other recipes would depend on this state
- Never for internal recipe state, completion status, or generic file operations

- Only reference existing recipe outputs in requires field
- Available outputs: {{ available_outputs }}

**INSTRUCTION WRITING RULES:**

- Keep instructions generic and ecosystem-agnostic in prompt.md
- Use specific tools as examples only: "e.g., Prettier for JavaScript, Black for Python"
- Focus on concepts and investigation steps, not tool-specific implementation
- Avoid tool-specific checks unless recipe specifically targets that tool
- Write investigation steps that work across different implementations

**CODE SNIPPET RULES:**

- Avoid basic code examples (imports, simple function calls)
- Only include complex configuration examples when absolutely necessary
- Focus on configuration files and setup commands
- Let developers implement the actual code
- Prefer describing what to configure rather than showing trivial code

**FILE STRUCTURE:**

1. Create {{ recipe_path }}/metadata.yaml with:
   - **IMPORTANT: Default to empty `provides: []` unless absolutely necessary**
   - Conservative requires lists referencing only essential dependencies
   - Separate variants for each tool/approach you identified
2. Create {{ recipe_path }}/prompt.md with:
   - Generic investigation steps
   - Ecosystem-agnostic guidance
3. Create {{ recipe_path }}/fixes/[ecosystem]\_[variant].md with:
   - ONE tool/approach per fix file
   - Specific implementation for that ecosystem and variant
   - Minimal, essential code examples only
   - If multiple tools exist, create multiple fix files

Use the Write tool to create each file following these principles.
