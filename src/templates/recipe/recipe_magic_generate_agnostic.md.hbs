Generate a Chorenzo ecosystem-agnostic recipe for: {{ recipe_name }}

Summary: {{ summary }}
Category: {{ category }}
Recipe ID: {{ recipe_id }}
Recipe Path: {{ recipe_path }}
{{ additional_instructions }}

Follow these guidelines for creating the ecosystem-agnostic recipe:
{{ recipe_guidelines }}

**ECOSYSTEM-AGNOSTIC REQUIREMENTS:**

- This recipe must work across ALL programming languages and ecosystems
- Use ONLY universal tools and configurations that don't depend on specific languages
- Focus on tools like: Git hooks, editor configs, documentation tools, CI/CD configurations, etc.
- Avoid language-specific package managers, frameworks, or runtime dependencies

**PROVIDES/REQUIRES GUIDELINES:**

**CRITICAL: Provides variables should be SCARCE. Default to empty `provides: []` in most cases.**

- **DEFAULT BEHAVIOR**: Use empty `provides: []` - Most recipes should have no provides variables
- **ONLY add provides when absolutely certain** other recipes would depend on this state
- **When in doubt, don't add** - It's better to require manual addition than create clutter
- **Focus on infrastructure/tooling state** that other recipes genuinely need to know about

**When to add provides variables:**
- Only when the recipe sets up fundamental infrastructure that other recipes genuinely need
- Only when there's a clear, obvious case that other recipes would depend on this state
- Never for internal recipe state, completion status, or generic file operations

- Only reference existing recipe outputs in requires field
- Available outputs: {{ available_outputs }}

**INSTRUCTION WRITING RULES:**

- Keep all instructions completely ecosystem-agnostic
- Use universal commands that work across operating systems when possible
- Focus on configuration files and setup that don't depend on specific languages
- Write investigation steps that work regardless of project ecosystem
- Avoid any language-specific checks or dependencies

**CODE SNIPPET RULES:**

- Avoid language-specific code examples entirely
- Focus on configuration files that work universally (.gitignore, .editorconfig, etc.)
- Include only universal setup commands
- Prefer describing universal configurations rather than showing language-specific code

**LEVEL SELECTION GUIDELINES:**

Choose the appropriate recipe level based on the recipe's scope and intended usage:

- **`workspace-only`**: Use for universal tools that MUST be global across the entire workspace
  - Examples: Git hooks, .editorconfig, global documentation configs, workspace-wide CI/CD setup
  - Never applies to individual projects, works identically across all ecosystems
  
- **`project-only`**: Use for universal tools that MUST be per-project
  - Examples: Project-specific documentation templates, individual project CI/CD configs
  - Never applies at workspace level, needed separately in each project
  
- **`workspace-preferred`**: Use for universal tools that work best globally but might need project-specific handling
  - Examples: Universal formatting rules that prefer workspace-wide but adapt to project differences
  - Intelligently applies at workspace or project level based on requirements
  
**CRITICAL: Most ecosystem-agnostic recipes should be `workspace-only` since universal tools typically work best at the workspace level. Choose `project-only` only if the tool genuinely needs per-project configuration.**

**FILE STRUCTURE:**

1. Create {{ recipe_path }}/metadata.yaml with:
   - Empty ecosystems array: `ecosystems: []`
   - **IMPORTANT: Choose appropriate `level` field based on guidelines above**
   - **IMPORTANT: Default to empty `provides: []` unless absolutely necessary**
   - Conservative requires lists referencing only essential dependencies
   - Universal recipe outputs (only if genuinely needed by other recipes)
2. Create {{ recipe_path }}/prompt.md with:
   - **WHAT and WHY only**: Goal statement and investigation steps to discover current state
   - **NO implementation details**: Do not include HOW to fix, install, or configure
   - Universal discovery/detection steps that identify what needs to be done
   - **CRITICAL**: Include Expected Output descriptions for EVERY field you list in the "provides" section of metadata.yaml
   - **CRITICAL**: Each provides field description should explain what the fact represents and how it's determined (through investigation or as result of application)
   - Completely ecosystem-agnostic investigation logic
3. Create {{ recipe_path }}/fix.md with:
   - **HOW only**: Implementation instructions for achieving the desired state
   - **NO investigation logic**: Do not include discovery or detection steps
   - Universal implementation that works across all ecosystems
   - Configuration files and commands that don't depend on specific languages
   - Minimal, essential examples using universal tools only

Use the Write tool to create each file following these principles.

**FINAL VALIDATION STEPS** (Required before completion):

After creating all recipe files:

1. Run `chorenzo recipes validate {{ recipe_path }} --debug`
2. Run `chorenzo recipes review {{ recipe_id }} --debug`
3. If issues found, fix them and run both commands again (once)
4. If issues still persist after fixing, include them in your final report
5. Report completion with any remaining validation warnings